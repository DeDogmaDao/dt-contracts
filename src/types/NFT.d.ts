/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface NFTInterface extends ethers.utils.Interface {
  functions: {
    "ADDRESS()": FunctionFragment;
    "Auctions(uint8)": FunctionFragment;
    "IPFS()": FunctionFragment;
    "MINTING_CONFIG()": FunctionFragment;
    "MaxSupply()": FunctionFragment;
    "STATE()": FunctionFragment;
    "TokenIsGod(uint16)": FunctionFragment;
    "TokenIsUpgraded(uint16)": FunctionFragment;
    "UpgradeRequestFeeInWei()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "buyBackToken(uint16)": FunctionFragment;
    "buyGod(uint8)": FunctionFragment;
    "finishAuction()": FunctionFragment;
    "finishMinting()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getAuctionPrice(uint8)": FunctionFragment;
    "initializer(tuple[])": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "publicMint(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revealArt(string)": FunctionFragment;
    "royaltyInfo(uint256,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBuyBackTreasury(address)": FunctionFragment;
    "setPlatform(address)": FunctionFragment;
    "setUpgradeRequestFeeInWei(uint256)": FunctionFragment;
    "startPublicMinting()": FunctionFragment;
    "startWhiteListMinting()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeRequestFeeIsPaid(uint256)": FunctionFragment;
    "upgradeToken(string,uint16,bool)": FunctionFragment;
    "upgradeTokenRequestFee(uint16)": FunctionFragment;
    "whitelistMinting(address,uint8,uint64,uint8,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "ADDRESS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "Auctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "IPFS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MINTING_CONFIG",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MaxSupply", values?: undefined): string;
  encodeFunctionData(functionFragment: "STATE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TokenIsGod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "TokenIsUpgraded",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "UpgradeRequestFeeInWei",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "buyBackToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyGod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finishAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finishMinting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializer",
    values: [
      {
        startPrice: BigNumberish;
        endPrice: BigNumberish;
        discountRate: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "publicMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "revealArt", values: [string]): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyBackTreasury",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setPlatform", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setUpgradeRequestFeeInWei",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startPublicMinting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startWhiteListMinting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeRequestFeeIsPaid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToken",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTokenRequestFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistMinting",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "ADDRESS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Auctions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "IPFS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MINTING_CONFIG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MaxSupply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "STATE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TokenIsGod", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TokenIsUpgraded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UpgradeRequestFeeInWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyBackToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyGod", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finishAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishMinting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "publicMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revealArt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuyBackTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatform",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpgradeRequestFeeInWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startPublicMinting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startWhiteListMinting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeRequestFeeIsPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeTokenRequestFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistMinting",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    approved: string;
    tokenId: BigNumber;
  }
>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean] & {
    owner: string;
    operator: string;
    approved: boolean;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; tokenId: BigNumber }
>;

export class NFT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NFTInterface;

  functions: {
    ADDRESS(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string] & {
        Owner: string;
        Platform: string;
        DefiTitan: string;
        BuyBackTreasury: string;
        WhiteListVerifier: string;
        RoyaltyDistributor: string;
      }
    >;

    Auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        tokenID: number;
        startTime: BigNumber;
        expiresAt: BigNumber;
        startPrice: BigNumber;
        endPrice: BigNumber;
        discountRate: BigNumber;
      }
    >;

    IPFS(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        GodCID: string;
        NotRevealedArtCID: string;
        ArtCID: string;
      }
    >;

    MINTING_CONFIG(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, BigNumber, number, number] & {
        MintPriceInWei: BigNumber;
        MaxMintPerAddress: number;
        AuctionStartTime: BigNumber;
        AuctionDuration: BigNumber;
        NumberOFTokenForAuction: number;
        RoyaltyFeePercent: number;
      }
    >;

    MaxSupply(overrides?: CallOverrides): Promise<[number]>;

    STATE(
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, boolean, boolean, boolean] & {
        Initialized: boolean;
        AuctionIsActive: boolean;
        WhiteListMintingIsActive: boolean;
        MintingIsActive: boolean;
        ArtIsRevealed: boolean;
        Finished: boolean;
      }
    >;

    TokenIsGod(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    TokenIsUpgraded(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    UpgradeRequestFeeInWei(overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    buyBackToken(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyGod(
      day: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finishAuction(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finishMinting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAuctionPrice(
      day: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initializer(
      configs: {
        startPrice: BigNumberish;
        endPrice: BigNumberish;
        discountRate: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    publicMint(
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revealArt(
      ipfsCid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    royaltyInfo(
      arg0: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { receiver: string; royaltyAmount: BigNumber }
    >;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBuyBackTreasury(
      buyBackTreasury_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPlatform(
      platform_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUpgradeRequestFeeInWei(
      upgradeRequestFeeInWei_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startPublicMinting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startWhiteListMinting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeRequestFeeIsPaid(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    upgradeToken(
      ipfsCid: string,
      tokenId: BigNumberish,
      isGodNow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTokenRequestFee(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistMinting(
      addr_: string,
      maxQuantity_: BigNumberish,
      quantity_: BigNumberish,
      whiteListType_: BigNumberish,
      sig: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ADDRESS(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, string] & {
      Owner: string;
      Platform: string;
      DefiTitan: string;
      BuyBackTreasury: string;
      WhiteListVerifier: string;
      RoyaltyDistributor: string;
    }
  >;

  Auctions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      tokenID: number;
      startTime: BigNumber;
      expiresAt: BigNumber;
      startPrice: BigNumber;
      endPrice: BigNumber;
      discountRate: BigNumber;
    }
  >;

  IPFS(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      GodCID: string;
      NotRevealedArtCID: string;
      ArtCID: string;
    }
  >;

  MINTING_CONFIG(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber, BigNumber, number, number] & {
      MintPriceInWei: BigNumber;
      MaxMintPerAddress: number;
      AuctionStartTime: BigNumber;
      AuctionDuration: BigNumber;
      NumberOFTokenForAuction: number;
      RoyaltyFeePercent: number;
    }
  >;

  MaxSupply(overrides?: CallOverrides): Promise<number>;

  STATE(
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, boolean, boolean, boolean, boolean] & {
      Initialized: boolean;
      AuctionIsActive: boolean;
      WhiteListMintingIsActive: boolean;
      MintingIsActive: boolean;
      ArtIsRevealed: boolean;
      Finished: boolean;
    }
  >;

  TokenIsGod(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  TokenIsUpgraded(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  UpgradeRequestFeeInWei(overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  buyBackToken(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyGod(
    day: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finishAuction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finishMinting(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getAuctionPrice(
    day: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initializer(
    configs: {
      startPrice: BigNumberish;
      endPrice: BigNumberish;
      discountRate: BigNumberish;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  publicMint(
    quantity: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revealArt(
    ipfsCid: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  royaltyInfo(
    arg0: BigNumberish,
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { receiver: string; royaltyAmount: BigNumber }
  >;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBuyBackTreasury(
    buyBackTreasury_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPlatform(
    platform_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUpgradeRequestFeeInWei(
    upgradeRequestFeeInWei_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startPublicMinting(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startWhiteListMinting(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(tokenId_: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeRequestFeeIsPaid(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  upgradeToken(
    ipfsCid: string,
    tokenId: BigNumberish,
    isGodNow: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTokenRequestFee(
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistMinting(
    addr_: string,
    maxQuantity_: BigNumberish,
    quantity_: BigNumberish,
    whiteListType_: BigNumberish,
    sig: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ADDRESS(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string] & {
        Owner: string;
        Platform: string;
        DefiTitan: string;
        BuyBackTreasury: string;
        WhiteListVerifier: string;
        RoyaltyDistributor: string;
      }
    >;

    Auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        tokenID: number;
        startTime: BigNumber;
        expiresAt: BigNumber;
        startPrice: BigNumber;
        endPrice: BigNumber;
        discountRate: BigNumber;
      }
    >;

    IPFS(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        GodCID: string;
        NotRevealedArtCID: string;
        ArtCID: string;
      }
    >;

    MINTING_CONFIG(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, BigNumber, number, number] & {
        MintPriceInWei: BigNumber;
        MaxMintPerAddress: number;
        AuctionStartTime: BigNumber;
        AuctionDuration: BigNumber;
        NumberOFTokenForAuction: number;
        RoyaltyFeePercent: number;
      }
    >;

    MaxSupply(overrides?: CallOverrides): Promise<number>;

    STATE(
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, boolean, boolean, boolean] & {
        Initialized: boolean;
        AuctionIsActive: boolean;
        WhiteListMintingIsActive: boolean;
        MintingIsActive: boolean;
        ArtIsRevealed: boolean;
        Finished: boolean;
      }
    >;

    TokenIsGod(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    TokenIsUpgraded(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    UpgradeRequestFeeInWei(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyBackToken(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyGod(day: BigNumberish, overrides?: CallOverrides): Promise<void>;

    finishAuction(overrides?: CallOverrides): Promise<void>;

    finishMinting(overrides?: CallOverrides): Promise<void>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getAuctionPrice(
      day: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializer(
      configs: {
        startPrice: BigNumberish;
        endPrice: BigNumberish;
        discountRate: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    publicMint(
      quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revealArt(ipfsCid: string, overrides?: CallOverrides): Promise<void>;

    royaltyInfo(
      arg0: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { receiver: string; royaltyAmount: BigNumber }
    >;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBuyBackTreasury(
      buyBackTreasury_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlatform(platform_: string, overrides?: CallOverrides): Promise<void>;

    setUpgradeRequestFeeInWei(
      upgradeRequestFeeInWei_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startPublicMinting(overrides?: CallOverrides): Promise<void>;

    startWhiteListMinting(overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeRequestFeeIsPaid(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    upgradeToken(
      ipfsCid: string,
      tokenId: BigNumberish,
      isGodNow: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTokenRequestFee(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistMinting(
      addr_: string,
      maxQuantity_: BigNumberish,
      quantity_: BigNumberish,
      whiteListType_: BigNumberish,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;
  };

  estimateGas: {
    ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    Auctions(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    IPFS(overrides?: CallOverrides): Promise<BigNumber>;

    MINTING_CONFIG(overrides?: CallOverrides): Promise<BigNumber>;

    MaxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    STATE(overrides?: CallOverrides): Promise<BigNumber>;

    TokenIsGod(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TokenIsUpgraded(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    UpgradeRequestFeeInWei(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyBackToken(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyGod(
      day: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finishAuction(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finishMinting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionPrice(
      day: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializer(
      configs: {
        startPrice: BigNumberish;
        endPrice: BigNumberish;
        discountRate: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publicMint(
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revealArt(
      ipfsCid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    royaltyInfo(
      arg0: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBuyBackTreasury(
      buyBackTreasury_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPlatform(
      platform_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUpgradeRequestFeeInWei(
      upgradeRequestFeeInWei_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startPublicMinting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startWhiteListMinting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeRequestFeeIsPaid(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgradeToken(
      ipfsCid: string,
      tokenId: BigNumberish,
      isGodNow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTokenRequestFee(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistMinting(
      addr_: string,
      maxQuantity_: BigNumberish,
      quantity_: BigNumberish,
      whiteListType_: BigNumberish,
      sig: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IPFS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINTING_CONFIG(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MaxSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TokenIsGod(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TokenIsUpgraded(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UpgradeRequestFeeInWei(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyBackToken(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyGod(
      day: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finishAuction(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finishMinting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionPrice(
      day: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializer(
      configs: {
        startPrice: BigNumberish;
        endPrice: BigNumberish;
        discountRate: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicMint(
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revealArt(
      ipfsCid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    royaltyInfo(
      arg0: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBuyBackTreasury(
      buyBackTreasury_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPlatform(
      platform_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUpgradeRequestFeeInWei(
      upgradeRequestFeeInWei_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startPublicMinting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startWhiteListMinting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeRequestFeeIsPaid(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradeToken(
      ipfsCid: string,
      tokenId: BigNumberish,
      isGodNow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTokenRequestFee(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistMinting(
      addr_: string,
      maxQuantity_: BigNumberish,
      quantity_: BigNumberish,
      whiteListType_: BigNumberish,
      sig: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
